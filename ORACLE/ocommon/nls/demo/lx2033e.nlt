# 
#  Copyright (c) 1994 by Oracle Corporation 
#    NAME
#      nw2033e.d - Example multi-byte character set object file
#    DESCRIPTION
#      This is an example of a text-format multi-byte character set
#      definition.
#    NOTES
#      This example is taken from the definition of JA16EUC.
#    MODIFIED   (MM/DD/YY)
#     pma        03/01/95 -  Increment version number
#     tlai       08/27/94 -  Increment version number
#     tlai       07/26/94 -  Creation

#
# Version number.  Refers to the file format version.
#
version = 1.1.0.0.0

#
# Type.  Must be "character_set".
#
type = character_set

#
# Character set subtype.  Must be "mb".
#
csetst = mb

#
# Information field.  You may put anything you want in here, up to 70 bytes
# (including the null terminator).
#
info = ""

#
# Character set ID
#
csetid = 830

#
# Lower and upper boundaries for multi -> single search
#
cset2l = 32
cset2u = 127

#
# Shift-in and shift-out characters.  Only used by shift-sensitive character
# sets.
#
csetsi = 0x00
csetso = 0x00

#
# Maximum character width
#
csetmx = 2

#
# Character set flags (bit field):
#   0x0002 = Shift-sensitive character set
#   0x0004 = Bytes in multi-byte characters distinct from single-byte chars
#   0x0008 = ASCII-based character set
#
csetfl = 12

#
# Character set name
#
csetna = "JA16EUC"

#
# Single-byte to-upper table.  256-entry array.
#
csetup = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,
52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,
78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,
72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,
128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,
147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,
166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,
185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,
204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,
223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,
242,243,244,245,246,247,248,249,250,251,252,253,254,255}

#
# Single-byte to-lower table.  256-entry array.
#
csetlo = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,
52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,104,105,106,
107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,
95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,
116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,
135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,
154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,
173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,
211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,
230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,
249,250,251,252,253,254,255}

#
# Multi-byte to-upper table.  16-entry array.
#
csetmu = {0,0,0,0,0,0,0,0,0,-0x20,-0x30,0,0,0,0,0}

#
# Multi-byte to-lower table.  16-entry array.
#
csetml = {0,0,0,0,0,0x20,0x30,0,0,0,0,0,0,0,0,0}

#
# Single-byte ctype classification table, 256-entry array.  Each entry is a
# bit field with the following flags:
#   0x0004 = Upper case
#   0x0008 = Lower case
#   0x0020 = Decimal digit
#   0x0040 = Space
#   0x0080 = Punctuation
#   0x0100 = Control character
#   0x0200 = Hexadecimal digit
#   0x0400 = None of the above but printable
#   0x0800 = Letter
#
# In addition, bits 0x0001 and 0x0002 indicate (character width - 1).
#
csetct = {256,256,256,256,256,256,256,256,256,320,320,320,320,320,256,256,256,
256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,1088,128,128,128,
128,128,128,128,128,128,128,128,128,128,128,128,544,544,544,544,544,544,544,
544,544,544,128,128,128,128,128,128,128,2564,2564,2564,2564,2564,2564,2052,
2052,2052,2052,2052,2052,2052,2052,2052,2052,2052,2052,2052,2052,2052,2052,
2052,2052,2052,2052,128,128,128,128,128,128,2568,2568,2568,2568,2568,2568,
2056,2056,2056,2056,2056,2056,2056,2056,2056,2056,2056,2056,2056,2056,2056,
2056,2056,2056,2056,2056,128,128,128,128,256,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1}

#
# Single-byte to multi-byte transliteration table.  256-entry array.  The
# values of cset2l and cset2u indicate the lower and upper boundaries to
# use when searching this table for multi-byte to single-byte transliteration.
#
cset2w = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0xa1a1,0xa1aa,0xa1c9,0xa1f4,0xa1f0,0xa1f3,0xa1f5,0xa1c7,0xa1ca,0xa1cb,
0xa1f6,0xa1dc,0xa1a4,0xa1dd,0xa1a5,0xa1bf,0xa3b0,0xa3b1,0xa3b2,0xa3b3,
0xa3b4,0xa3b5,0xa3b6,0xa3b7,0xa3b8,0xa3b9,0xa1a7,0xa1a8,0xa1e3,0xa1e1,
0xa1e4,0xa1a9,0xa1f7,0xa3c1,0xa3c2,0xa3c3,0xa3c4,0xa3c5,0xa3c6,0xa3c7,
0xa3c8,0xa3c9,0xa3ca,0xa3cb,0xa3cc,0xa3cd,0xa3ce,0xa3cf,0xa3d0,0xa3d1,
0xa3d2,0xa3d3,0xa3d4,0xa3d5,0xa3d6,0xa3d7,0xa3d8,0xa3d9,0xa3da,0xa1ce,
0xa1ef,0xa1cf,0xa1b0,0xa1b2,0xa1c7,0xa3e1,0xa3e2,0xa3e3,0xa3e4,0xa3e5,
0xa3e6,0xa3e7,0xa3e8,0xa3e9,0xa3ea,0xa3eb,0xa3ec,0xa3ed,0xa3ee,0xa3ef,
0xa3f0,0xa3f1,0xa3f2,0xa3f3,0xa3f4,0xa3f5,0xa3f6,0xa3f7,0xa3f8,0xa3f9,
0xa3fa,0xa1d0,0xa1c3,0xa1d1,0xa1b1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0}

#
# Multi-byte ctype classification table.  Each entry is a bit field with the
# following values:
#   0x0004 = Upper case
#   0x0008 = Lower case
#   0x0020 = Decimal digit
#   0x0040 = Space
#   0x0080 = Punctuation
#   0x0100 = Control character
#   0x0200 = Hexadecimal digit
#   0x0400 = None of the above but printable
#   0x0800 = Letter
#
# In addition, bits 0x0001 and 0x0002 indicate which position to use in the
# multi-byte to-upper and to-lower tables, and bit 0x0010 indicates
# (display length - 1).
#
# Converting to upper- or lowercase is done by taking the least significant
# four bits (the uppercase, lowercase, and position bits) as an index into
# the multi-byte to-upper or to-lower table.  The value at that entry is
# added to the original character to get the upper- or lowercase equivalent.
#
csetmc = {0,0,0,0,2048,2048,2048,2048,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1104,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,2064,2064,2064,2064,2064,2064,2064,2064,2064,1040,
2064,2064,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,
1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,1040,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,560,560,560,560,560,560,560,560,
560,560,0,0,0,0,0,0,0,2581,2581,2581,2581,2581,2581,2069,2069,2069,2069,2069,
2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,
0,0,0,0,0,0,2585,2585,2585,2585,2585,2585,2073,2073,2073,2073,2073,2073,2073,
2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,0,0,0,0,0,
2064,2064,2064,2064,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2069,2069,2069,2069,2069,2069,
2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,2069,
2069,2069,2069,0,0,0,0,0,0,0,0,2073,2073,2073,2073,2073,2073,2073,2073,2073,
2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,2073,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2070,2070,2070,2070,2070,2070,2070,2070,2070,
2070,2070,2070,2070,2070,2070,2070,2070,2070,2070,2070,2070,2070,2070,2070,
2070,2070,2070,2070,2070,2070,2070,2070,2070,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,
2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,2074,
2074,2074,2074,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

#
# Multi-byte ctype node array.  Each group of three values defines a node:
# the first indicates the next table to check (0 = node array, 1 = ctype
# array), the second specifies the size of the next "sub-table" minus 4,
# and the third specifies the offset into the main table where the
# "sub-table" begins.  The first entry is the root node, where all searches
# begin.
#
# As an example, let's take the character 0xA6C5.  Starting with the root
# node, we find that the next table to check is the node array (this table).
# The "sub-table" to check begins as offset 0, and its size is 256 entries
# (keeping in mind that an entry consists of three values).  Taking the value
# of the first byte (0xA6) modulo 256, we index into this table and end up
# pointing at the node whose values are {1,0,524}.  This tells us that the
# next table to look in is a sub-table in the ctype table of size 4, beginning
# at offset 524.  So we take the second byte (0xC5) modulo 4, which is 1,
# and we index into the ctype table (csetmc).  Entry 1 of the sub-table
# beginning at offset 524 has value 2064, which means the character is a
# letter taking up two display positions.
#
csetmn = {0,252,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,4,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,252,8,1,0,264,1,252,268,
1,0,524,1,0,524,1,252,528,1,252,784,1,0,264,1,0,264,1,0,264,1,0,264,
1,0,264,1,0,264,1,0,264,1,0,264,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,1,0,524,
1,0,524,1,0,524,1,0,0}
